{"version":3,"sources":["components/Header.jsx","components/Balance.jsx","components/Income.jsx","components/Transaction.jsx","components/TransactionList.jsx","components/AddTransaction.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","Balance","props","total","amounts","reduce","acc","item","toFixed","Income","income","filter","expense","className","Transaction","sign","transcation","amount","text","Math","abs","onClick","deleteTrans","id","TransactionList","deleteTransactions","transactions","map","transaction","key","AddTransaction","useState","setText","setAmount","type","value","onChange","e","target","placeholder","newTransaction","floor","random","addTranscations","App","setTransaction","sortTrans","trasaction","newTranscation","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f7a60a61.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Header() {\r\n  return <h2>Expense Tracker</h2>;\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Balance(props) {\r\n  const total = props.amounts\r\n    .reduce((acc, item) => (acc += item), 0)\r\n    .toFixed(2);\r\n  return (\r\n    <div>\r\n      <h4>Your Balance</h4>\r\n      <h1>${total}</h1>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Income(props) {\r\n  const income = props.amounts\r\n    .filter((item) => item > 0)\r\n    .reduce((acc, item) => (acc += item), 0)\r\n    .toFixed(2);\r\n  const expense =\r\n    props.amounts\r\n      .filter((item) => item < 0)\r\n      .reduce((acc, item) => (acc += item), 0) * -(1).toFixed(2);\r\n  return (\r\n    <div className=\"inc-exp-container\">\r\n      <div>\r\n        {\" \"}\r\n        <h4>Income</h4>\r\n        <p className=\"money plus\">{income}$</p>\r\n      </div>\r\n      <div>\r\n        <h4>Expense</h4>\r\n        <p className=\"money minus\">{expense}$</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Transaction(props) {\r\n  const sign = props.transcation.amount < 0 ? \"-\" : \"+\";\r\n  return (\r\n    <li className={props.transcation.amount < 0 ? \"minus\" : \"plus\"}>\r\n      {props.transcation.text}\r\n      <span>\r\n        {sign}${Math.abs(props.transcation.amount)}\r\n      </span>\r\n      <button\r\n        onClick={() => props.deleteTrans(props.transcation.id)}\r\n        className=\"delete-btn\"\r\n      >\r\n        X\r\n      </button>\r\n    </li>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Transcation from \"./Transaction\";\r\n\r\nexport default function TransactionList(props) {\r\n  const deleteTrans = props.deleteTransactions;\r\n  return (\r\n    <div>\r\n      <h3>History</h3>\r\n      <ul className=\"list\">\r\n        {props.transactions.map((transaction) => {\r\n          return (\r\n            <Transcation\r\n              key={transaction.id}\r\n              transcation={transaction}\r\n              deleteTrans={deleteTrans}\r\n            />\r\n          );\r\n        })}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function AddTransaction(props) {\r\n  const [text, setText] = useState(\"\");\r\n  const [amount, setAmount] = useState(0);\r\n\r\n  return (\r\n    <div>\r\n      <h3>Add new transaction</h3>\r\n\r\n      <div className=\"form-control\">\r\n        {\" \"}\r\n        <label>Text</label>\r\n        <input\r\n          type=\"text\"\r\n          value={text}\r\n          onChange={(e) => setText(e.target.value)}\r\n          placeholder=\"Enter text...\"\r\n        />\r\n      </div>\r\n\r\n      <div className=\"form-control\">\r\n        <label>Amount</label>\r\n        <input\r\n          type=\"number\"\r\n          value={amount}\r\n          onChange={(e) => setAmount(e.target.value)}\r\n          placeholder=\"Enter amount...\"\r\n        />\r\n      </div>\r\n      <button\r\n        onClick={() => {\r\n          const newTransaction = {\r\n            id: Math.floor(Math.random() * 100000),\r\n            text,\r\n            amount: +amount,\r\n          };\r\n\r\n          props.addTranscations(newTransaction);\r\n          setAmount(0);\r\n          setText(\"\");\r\n        }}\r\n        className=\"btn\"\r\n      >\r\n        Add transaction\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\nimport Header from \"./components/Header\";\nimport Balance from \"./components/Balance\";\nimport Income from \"./components/Income\";\nimport TransactionList from \"./components/TransactionList\";\nimport AddTransaction from \"./components/AddTransaction\";\nimport \"./App.css\";\n\nfunction App() {\n  const [transactions, setTransaction] = useState([]);\n\n  const amounts = transactions.map((transaction) => transaction.amount);\n\n  const addTranscations = (newTranscation) => {\n    setTransaction([...transactions, newTranscation]);\n  };\n\n  const deleteTransactions = (id) => {\n    const sortTrans = transactions.filter((trasaction) => trasaction.id !== id);\n    setTransaction([...sortTrans]);\n  };\n  return (\n    <div>\n      <Header />\n      <div className=\"container\">\n        <Balance amounts={amounts} />\n        <Income amounts={amounts} />\n        <TransactionList\n          transactions={transactions}\n          deleteTransactions={deleteTransactions}\n        />\n        <AddTransaction addTranscations={addTranscations} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}